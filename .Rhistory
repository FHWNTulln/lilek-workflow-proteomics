sample_names_unique <- colnames(res_raw[[i]][grep("Unique_",
colnames(res_raw[[i]]))])
sample_names_lfq <- colnames(res_raw[[i]][grep("LFQ_",
colnames(res_raw[[i]]))])
}
########## create result data frame & result lists
# create data frame for razor
results_2gether_razor <- data.frame(matrix(ncol = length(sample_names_razor), nrow = length(file.list)))
row.names(results_2gether_razor) <- file.list
colnames(results_2gether_razor) <- sample_names_razor
#create data frame for unique
results_2gether_unique <- data.frame(matrix(ncol = length(sample_names_unique), nrow = length(file.list)))
row.names(results_2gether_unique) <- file.list
colnames(results_2gether_unique) <- sample_names_unique
#create data frame for lfq
results_2gether_lfq <- data.frame(matrix(ncol = length(sample_names_lfq), nrow = length(file.list)))
row.names(results_2gether_lfq) <- file.list
colnames(results_2gether_lfq) <- sample_names_lfq
#results lists
results_razor <- list()
results_unique <- list()
results_lfq <- list()
########## perform evaluation
if (RAZOR == TRUE) {
cat("\n")
cat("##","Razor","\n")
cat("\n")
for (x in file.list){
cat("\n")
cat("###",substring(x, 1, nchar(x)-4),"\n")
data_raw <- as.data.frame(res_raw[[1]])
data <- filtering(data_raw)
results <- data.frame(matrix(ncol = length(sample_names_razor), nrow = nrow(data)))
colnames(results) <- sample_names_razor
i <- 0
for (i in 1:length(sample_names_razor)){
name <- sample_names_razor[1]
tmp <- (data[name] >= unique)
results[i] <- tmp
cat(name,"<br/>",sum(tmp, na.rm = TRUE),"<br/>")
}
results_razor[[1]] <- results
results_2gether_razor[1,] <- sapply(results,function(x)sum(x, na.rm = TRUE))
cat("\n")
#create heatmaps
paletteLength <- 50
myColor <- colorRampPalette(c("navy", "white",
"firebrick3"))(paletteLength)
data4pheatmap <- results
data4pheatmap <- results
data4pheatmap <- data4pheatmap*1
data4pheatmap[data4pheatmap == 0] <- NA
# remove NA rows
ind <- apply(data4pheatmap, 1, function(x) all(is.na(x)))
data4pheatmap_clear <- data4pheatmap[!ind,]
data4pheatmap_clear[is.na(data4pheatmap_clear)] <- 0
if (ncol(data4pheatmap_clear) < 2){
cat("\n")
cat("##"," No heatmap possible. Too less columns in the result
table.","\n")
} else {
pheatmap(data4pheatmap_clear,
color = myColor,
treeheight_row = 10,
angle_col ="45",
treeheight_col = 10,
legend = TRUE,
labels_row = rep("",nrow(data4pheatmap)),
labels_col = sample_names_raw)
cat("\n")
}
}
}
###############################
#
#define settings
#
###############################
GET_SAMPLE_NAMES <- TRUE # if set to FALSE define it in the next line
#sample_names_user <- c()
unique <- params$unique  # how many peptides should be at least necessary to identify a protein
# which types should be evaluated TRUE or FALSE could be used
RAZOR <- FALSE
UNIQUE <- FALSE
LFQ <- FALSE
if (any(grepl("RAZOR",params$protein_types))){
RAZOR <- TRUE
}
if (any(grepl("UNIQUE",params$protein_types))){
UNIQUE <- TRUE
}
if (any(grepl("LFQ",params$protein_types))){
LFQ <- TRUE
}
LFQ <- FALSE
# define path of the proteinGroups.txt file(s)
path = params$path
# save files | options
# FALSE - results are not saved
# "RDS" - save results into R data file format
# "CSV" - save results into a csv file
SAVE <- "FALSE"
if (any(grepl("RDS",params$SAVE))){
SAVE <- "RDS"
}
if (any(grepl("CSV",params$SAVE))){
SAVE <- "CSV"
}
start_time = format(Sys.time(), '%X')
knitr::opts_chunk$set(echo = TRUE)
# load libraries
library(tidyverse)
library(dplyr)
library(pheatmap)
library(ggplot2)
#library(reshape)
library(knitr)
# load functions
filtering <- function(d){
data_raw %>% filter(
Potential.contaminant != "+",
Reverse != "+",
Only.identified.by.site != "+")
}
print("loading sucessful")
infile <- read.csv(path, dec=".", sep="\t")
res_raw <- list(infile)
file.list <- c("test")
########## get sample names
if (GET_SAMPLE_NAMES == TRUE){
#get sample names
tmp <- colnames(res_raw[[1]])
tmp <- tmp[grep("Razor...unique.peptides.",tmp)]
tmp <- sub(".*Razor...unique.peptides.", "",tmp)
sample_names_raw <- tmp
rm(tmp)
#create sample names
sample_names_razor <- paste("Razor...unique.peptides.",sample_names_raw, sep="")
sample_names_unique <- paste("Unique.peptides.",sample_names_raw, sep="")
sample_names_lfq <- paste("LFQ.intensity.",sample_names_raw, sep="")
} else {
res_raw[[1]] <- res_raw[[1]] %>%
rename_with(~ paste("Razor_", sample_names_user, sep = ""),
starts_with("Razor...unique.peptides.")) %>%
rename_with(~ paste("Unique_", sample_names_user, sep = ""),
starts_with("Unique.peptides.")) %>%
rename_with(~ paste("LFQ_", sample_names_user, sep = ""),
starts_with("LFQ.intensity."))
# get column names
sample_names_razor <- colnames(res_raw[[i]][grep("Razor_",
colnames(res_raw[[i]]))])
sample_names_unique <- colnames(res_raw[[i]][grep("Unique_",
colnames(res_raw[[i]]))])
sample_names_lfq <- colnames(res_raw[[i]][grep("LFQ_",
colnames(res_raw[[i]]))])
}
########## create result data frame & result lists
# create data frame for razor
results_2gether_razor <- data.frame(matrix(ncol = length(sample_names_razor), nrow = length(file.list)))
row.names(results_2gether_razor) <- file.list
colnames(results_2gether_razor) <- sample_names_razor
#create data frame for unique
results_2gether_unique <- data.frame(matrix(ncol = length(sample_names_unique), nrow = length(file.list)))
row.names(results_2gether_unique) <- file.list
colnames(results_2gether_unique) <- sample_names_unique
#create data frame for lfq
results_2gether_lfq <- data.frame(matrix(ncol = length(sample_names_lfq), nrow = length(file.list)))
row.names(results_2gether_lfq) <- file.list
colnames(results_2gether_lfq) <- sample_names_lfq
#results lists
results_razor <- list()
results_unique <- list()
results_lfq <- list()
########## perform evaluation
if (RAZOR == TRUE) {
cat("\n")
cat("##","Razor","\n")
cat("\n")
for (x in file.list){
data_raw <- as.data.frame(res_raw[[1]])
data <- filtering(data_raw)
results <- data.frame(matrix(ncol = length(sample_names_razor), nrow = nrow(data)))
colnames(results) <- sample_names_razor
i <- 0
for (i in 1:length(sample_names_razor)){
name <- sample_names_razor[1]
tmp <- (data[name] >= unique)
results[i] <- tmp
cat(name,"<br/>",sum(tmp, na.rm = TRUE),"<br/>")
}
results_razor[[1]] <- results
results_2gether_razor[1,] <- sapply(results,function(x)sum(x, na.rm = TRUE))
cat("\n")
#create heatmaps
paletteLength <- 50
myColor <- colorRampPalette(c("navy", "white",
"firebrick3"))(paletteLength)
data4pheatmap <- results
data4pheatmap <- results
data4pheatmap <- data4pheatmap*1
data4pheatmap[data4pheatmap == 0] <- NA
# remove NA rows
ind <- apply(data4pheatmap, 1, function(x) all(is.na(x)))
data4pheatmap_clear <- data4pheatmap[!ind,]
data4pheatmap_clear[is.na(data4pheatmap_clear)] <- 0
if (ncol(data4pheatmap_clear) < 2){
cat("\n")
cat("##"," No heatmap possible. Too less columns in the result
table.","\n")
} else {
pheatmap(data4pheatmap_clear,
color = myColor,
treeheight_row = 10,
angle_col ="45",
treeheight_col = 10,
legend = TRUE,
labels_row = rep("",nrow(data4pheatmap)),
labels_col = sample_names_raw)
cat("\n")
}
}
}
View(results)
sample_names_razor
#create heatmaps
paletteLength <- 50
myColor <- colorRampPalette(c("navy", "white",
"firebrick3"))(paletteLength)
data4pheatmap <- results
data4pheatmap <- results
data4pheatmap <- data4pheatmap*1
data4pheatmap[data4pheatmap == 0] <- NA
# remove NA rows
ind <- apply(data4pheatmap, 1, function(x) all(is.na(x)))
data4pheatmap_clear <- data4pheatmap[!ind,]
data4pheatmap_clear[is.na(data4pheatmap_clear)] <- 0
if (ncol(data4pheatmap_clear) < 2){
cat("\n")
cat("##"," No heatmap possible. Too less columns in the result
table.","\n")
} else {
pheatmap(data4pheatmap_clear,
color = myColor,
treeheight_row = 10,
angle_col ="45",
treeheight_col = 10,
legend = TRUE,
labels_row = rep("",nrow(data4pheatmap)),
labels_col = sample_names_raw)
cat("\n")
}
sample_names_raw
data4pheatmap <- results
data4pheatmap <- data4pheatmap*1
data4pheatmap[data4pheatmap == 0] <- NA
# remove NA rows
ind <- apply(data4pheatmap, 1, function(x) all(is.na(x)))
data4pheatmap_clear <- data4pheatmap[!ind,]
data4pheatmap_clear[is.na(data4pheatmap_clear)] <- 0
if (ncol(data4pheatmap_clear) < 2){
cat("\n")
cat("##"," No heatmap possible. Too less columns in the result
table.","\n")
} else {
pheatmap(data4pheatmap_clear,
treeheight_row = 10,
angle_col ="45",
treeheight_col = 10,
legend = TRUE,
labels_row = rep("",nrow(data4pheatmap)),
labels_col = sample_names_raw)
cat("\n")
}
pheatmap(data4pheatmap_clear,
color = myColor,
breaks = c(0,1),
treeheight_row = 10,
angle_col ="45",
treeheight_col = 10,
legend = TRUE,
labels_row = rep("",nrow(data4pheatmap)),
labels_col = sample_names_raw)
mycolor
myColor
#create heatmaps
paletteLength <- 2
myColor <- colorRampPalette(c("navy", "white",
"firebrick3"))(paletteLength)
pheatmap(data4pheatmap_clear,
color = myColor,
treeheight_row = 10,
angle_col ="45",
treeheight_col = 10,
legend = TRUE,
labels_row = rep("",nrow(data4pheatmap)),
labels_col = sample_names_raw)
pheatmap(data4pheatmap_clear,
color = myColor,
treeheight_row = 10,
angle_col ="45",
treeheight_col = 10,
legend = TRUE,
labels_row = rep("",nrow(data4pheatmap)),
labels_col = sample_names_raw)
#create heatmaps
myColor
pheatmap(data4pheatmap_clear,
color = myColor,
breaks = c(1,2),
treeheight_row = 10,
angle_col ="45",
treeheight_col = 10,
legend = TRUE,
labels_row = rep("",nrow(data4pheatmap)),
labels_col = sample_names_raw)
pheatmap(data4pheatmap_clear,
color = myColor,
breaks = c(0,1),
treeheight_row = 10,
angle_col ="45",
treeheight_col = 10,
legend = TRUE,
labels_row = rep("",nrow(data4pheatmap)),
labels_col = sample_names_raw)
View(data4pheatmap_clear)
data4pheatmap <- results
data4pheatmap <- results
data4pheatmap <- results
View(data4pheatmap)
data4pheatmap <- data4pheatmap*1
View(data4pheatmap)
data4pheatmap[data4pheatmap == 0] <- NA
# remove NA rows
ind <- apply(data4pheatmap, 1, function(x) all(is.na(x)))
data4pheatmap_clear <- data4pheatmap[!ind,]
data4pheatmap_clear[is.na(data4pheatmap_clear)] <- 0
if (ncol(data4pheatmap_clear) < 2){
cat("\n")
cat("##"," No heatmap possible. Too less columns in the result
table.","\n")
} else {
pheatmap(data4pheatmap_clear,
color = myColor,
breaks = c(0,1),
treeheight_row = 10,
angle_col ="45",
treeheight_col = 10,
legend = TRUE,
labels_row = rep("",nrow(data4pheatmap)),
labels_col = sample_names_raw)
cat("\n")
}
pheatmap(data4pheatmap,
color = myColor,
breaks = c(0,1),
treeheight_row = 10,
angle_col ="45",
treeheight_col = 10,
legend = TRUE,
labels_row = rep("",nrow(data4pheatmap)),
labels_col = sample_names_raw)
data4pheatmap[data4pheatmap == 0] <- NA
pheatmap(data4pheatmap,
color = myColor,
breaks = c(0,1),
treeheight_row = 10,
angle_col ="45",
treeheight_col = 10,
legend = TRUE,
labels_row = rep("",nrow(data4pheatmap)),
labels_col = sample_names_raw)
# remove NA rows
ind <- apply(data4pheatmap, 1, function(x) all(is.na(x)))
data4pheatmap_clear <- data4pheatmap[!ind,]
data4pheatmap_clear[is.na(data4pheatmap_clear)] <- 0
data4pheatmap <- results
data4pheatmap <- data4pheatmap*1
pheatmap(data4pheatmap,
color = myColor,
breaks = c(0,1),
treeheight_row = 10,
angle_col ="45",
treeheight_col = 10,
legend = TRUE,
labels_row = rep("",nrow(data4pheatmap)),
labels_col = sample_names_raw)
pheatmap(data4pheatmap,
color = myColor,
treeheight_row = 10,
angle_col ="45",
treeheight_col = 10,
legend = TRUE,
labels_row = rep("",nrow(data4pheatmap)),
labels_col = sample_names_raw)
View(results)
sample_names_razor
########## perform evaluation
if (RAZOR == TRUE) {
cat("\n")
cat("##","Razor","\n")
cat("\n")
for (x in file.list){
data_raw <- as.data.frame(res_raw[[1]])
data <- filtering(data_raw)
results <- data.frame(matrix(ncol = length(sample_names_razor), nrow = nrow(data)))
colnames(results) <- sample_names_razor
i <- 0
for (i in 1:length(sample_names_razor)){
name <- sample_names_razor[1]
tmp <- (data[name] >= unique)
results[i] <- tmp
cat(name,"<br/>",sum(tmp, na.rm = TRUE),"<br/>")
}
results_razor[[x]] <- results
results_2gether_razor[x,] <- sapply(results,function(x)sum(x, na.rm = TRUE))
cat("\n")
#create heatmaps
paletteLength <- 50
myColor <- colorRampPalette(c("navy", "white",
"firebrick3"))(paletteLength)
data4pheatmap <- results
data4pheatmap <- data4pheatmap*1
data4pheatmap[data4pheatmap == 0] <- NA
# remove NA rows
ind <- apply(data4pheatmap, 1, function(x) all(is.na(x)))
data4pheatmap_clear <- data4pheatmap[!ind,]
data4pheatmap_clear[is.na(data4pheatmap_clear)] <- 0
if (ncol(data4pheatmap_clear) < 2){
cat("\n")
cat("##"," No heatmap possible. Too less columns in the result
table.","\n")
} else {
pheatmap(data4pheatmap_clear,
color = myColor,
breaks = c(0,1),
treeheight_row = 10,
angle_col ="45",
treeheight_col = 10,
legend = TRUE,
labels_row = rep("",nrow(data4pheatmap)),
labels_col = sample_names_raw)
cat("\n")
}
}
}
View(results)
sample_names_razor
########## perform evaluation
if (RAZOR == TRUE) {
cat("\n")
cat("##","Razor","\n")
cat("\n")
for (x in file.list){
data_raw <- as.data.frame(res_raw[[1]])
data <- filtering(data_raw)
results <- data.frame(matrix(ncol = length(sample_names_razor), nrow = nrow(data)))
colnames(results) <- sample_names_razor
i <- 0
for (i in 1:length(sample_names_razor)){
name <- sample_names_razor[i]
tmp <- (data[name] >= unique)
results[i] <- tmp
cat(name,"<br/>",sum(tmp, na.rm = TRUE),"<br/>")
}
results_razor[[x]] <- results
results_2gether_razor[x,] <- sapply(results,function(x)sum(x, na.rm = TRUE))
cat("\n")
#create heatmaps
paletteLength <- 50
myColor <- colorRampPalette(c("navy", "white",
"firebrick3"))(paletteLength)
data4pheatmap <- results
data4pheatmap <- data4pheatmap*1
data4pheatmap[data4pheatmap == 0] <- NA
# remove NA rows
ind <- apply(data4pheatmap, 1, function(x) all(is.na(x)))
data4pheatmap_clear <- data4pheatmap[!ind,]
data4pheatmap_clear[is.na(data4pheatmap_clear)] <- 0
if (ncol(data4pheatmap_clear) < 2){
cat("\n")
cat("##"," No heatmap possible. Too less columns in the result
table.","\n")
} else {
pheatmap(data4pheatmap_clear,
color = myColor,
breaks = c(0,1),
treeheight_row = 10,
angle_col ="45",
treeheight_col = 10,
legend = TRUE,
labels_row = rep("",nrow(data4pheatmap)),
labels_col = sample_names_raw)
cat("\n")
}
}
}
pheatmap(data4pheatmap,
color = myColor,
treeheight_row = 10,
angle_col ="45",
treeheight_col = 10,
legend = TRUE,
labels_row = rep("",nrow(data4pheatmap)),
labels_col = sample_names_raw)
pheatmap(data4pheatmap_clear,
color = myColor,
treeheight_row = 10,
angle_col ="45",
treeheight_col = 10,
legend = TRUE,
labels_row = rep("",nrow(data4pheatmap)),
labels_col = sample_names_raw)
